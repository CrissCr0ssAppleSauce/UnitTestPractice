        -:    0:Source:Practice.cpp
        -:    0:Graph:Practice.gcno
        -:    0:Data:Practice.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "Practice.h"
        -:    2:#include <string>
        -:    3:
        -:    4:using std::string;
        -:    5:
        -:    6:// Receive three integers and rearrange their values so that they are in
        -:    7:// descending order from greatest (first) to least (third)
function _ZN8Practice14sortDescendingERiS0_S0_ called 9 returned 100% blocks executed 100%
        9:    8:void Practice::sortDescending(int & first, int & second, int & third)
        -:    9:{
        9:   10:  if( first < second )
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:   11:  {
        3:   12:    int temp = first;
        3:   13:    first = second;
        3:   14:    second = temp;
        -:   15:  }
        9:   16:  if( first < third )
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:   17:  {
        3:   18:    int temp = first;
        3:   19:    first = third;
        3:   20:    third = temp;
        -:   21:  }
        9:   22:  if( second < third )
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:   23:  {
        3:   24:    int temp = second;
        3:   25:    second = third;
        3:   26:    third = temp;
        -:   27:  }
        9:   28:}
        -:   29:
        -:   30:// Receive a string and return whether or not it is strictly a palindrome,
        -:   31:// where it is spelled the same backwards and forwards when considering every
        -:   32:// character in the string, but disregarding case ('x' is the same as 'X')
function _ZN8Practice12isPalindromeENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 12 returned 100% blocks executed 96%
       12:   33:bool Practice::isPalindrome(string input)
        -:   34:{
       57:   35:  for(unsigned int i=0; i < input.size(); i++)
call    0 returned 100%
branch  1 taken 79% (fallthrough)
branch  2 taken 21%
        -:   36:  {
       45:   37:    if( input[i] < 'A' || input[i] > 'Z' )
call    0 returned 100%
branch  1 taken 60% (fallthrough)
branch  2 taken 40%
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
        -:   38:    {
        -:   39:      //change lower case to upper case
       45:   40:      input[i] = input[i] - ('a' - 'A');
call    0 returned 100%
call    1 returned 100%
        -:   41:    }
        -:   42:  }
       23:   43:  for(unsigned int i=0; i < input.size()/2; i++)
call    0 returned 100%
branch  1 taken 61% (fallthrough)
branch  2 taken 39%
        -:   44:  {
       14:   45:    if( input[i] != input[input.size()-1-i] )
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
branch  3 taken 21% (fallthrough)
branch  4 taken 79%
        3:   46:      return false;
        -:   47:  }
        9:   48:  return true;
        -:   49:}
        -:   50:
        -:   51:// This function receives a string and counts how many times the same character
        -:   52:// is repeated at the beginning of the string, before any other characters. The
        -:   53:// function is case sensative so 'Z' is different than 'z'.
function _ZN8Practice22count_starting_repeatsENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 12 returned 100% blocks executed 100%
       12:   54:int Practice::count_starting_repeats(string word)
        -:   55:{
       12:   56:    int repetition = 1;
       12:   57:    int index = 0;
        -:   58:    
       98:   59:    while( index < word.length()-1 && word[index] == word[index+1] ){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
call    3 returned 100%
call    4 returned 100%
branch  5 taken 78% (fallthrough)
branch  6 taken 22%
branch  7 taken 78% (fallthrough)
branch  8 taken 22%
       43:   60:      repetition++;
       43:   61:      index++;
        -:   62:    }
        -:   63:
       12:   64:    return repetition;
        -:   65:}
